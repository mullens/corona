{"ast":null,"code":"var _jsxFileName = \"/Users/mullens/corona/pages/index.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport fetch from 'isomorphic-unfetch';\nimport { Charts, ChartContainer, ChartRow, YAxis, LineChart } from \"react-timeseries-charts\";\n\nconst Index = props => {\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 5,\n      columnNumber: 10\n    }\n  }, __jsx(ChartContainer, {\n    timeRange: series1.timerange(),\n    width: 800,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 5\n    }\n  }, __jsx(ChartRow, {\n    height: \"200\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 7\n    }\n  }, __jsx(YAxis, {\n    id: \"axis1\",\n    label: \"AUD\",\n    min: 0.5,\n    max: 1.5,\n    width: \"60\",\n    type: \"linear\",\n    format: \"$,.2f\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 11\n    }\n  }), __jsx(Charts, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 11\n    }\n  }, __jsx(LineChart, {\n    axis: \"axis1\",\n    series: series1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 15\n    }\n  }), __jsx(LineChart, {\n    axis: \"axis2\",\n    series: series2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 15\n    }\n  })), __jsx(YAxis, {\n    id: \"axis2\",\n    label: \"Euro\",\n    min: 0.5,\n    max: 1.5,\n    width: \"80\",\n    type: \"linear\",\n    format: \"$,.2f\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 11\n    }\n  }))), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 5\n    }\n  }, JSON.stringify(props.table)));\n};\n\nIndex.getInitialProps = async function () {\n  const res = await fetch('https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv'); // const data = await res.json();\n\n  const text = await res.text();\n  const [headings, ...data] = text.split('\\n');\n  const table = data.filter(e => e.includes('San Francisco')).map(e => e.split(','));\n  return {\n    table\n  };\n};\n\nexport default Index;","map":{"version":3,"sources":["/Users/mullens/corona/pages/index.tsx"],"names":["fetch","Charts","ChartContainer","ChartRow","YAxis","LineChart","Index","props","series1","timerange","series2","JSON","stringify","table","getInitialProps","res","text","headings","data","split","filter","e","includes","map"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,oBAAlB;AACA,SAASC,MAAT,EAAiBC,cAAjB,EAAiCC,QAAjC,EAA2CC,KAA3C,EAAkDC,SAAlD,QAAmE,yBAAnE;;AAEA,MAAMC,KAAK,GAAIC,KAAD,IAAgB;AAC5B,SAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACL,MAAC,cAAD;AAAgB,IAAA,SAAS,EAAEC,OAAO,CAACC,SAAR,EAA3B;AAAgD,IAAA,KAAK,EAAE,GAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,QAAD;AAAU,IAAA,MAAM,EAAC,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,KAAD;AAAO,IAAA,EAAE,EAAC,OAAV;AAAkB,IAAA,KAAK,EAAC,KAAxB;AAA8B,IAAA,GAAG,EAAE,GAAnC;AAAwC,IAAA,GAAG,EAAE,GAA7C;AAAkD,IAAA,KAAK,EAAC,IAAxD;AAA6D,IAAA,IAAI,EAAC,QAAlE;AAA2E,IAAA,MAAM,EAAC,OAAlF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEI,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,SAAD;AAAW,IAAA,IAAI,EAAC,OAAhB;AAAwB,IAAA,MAAM,EAAED,OAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEI,MAAC,SAAD;AAAW,IAAA,IAAI,EAAC,OAAhB;AAAwB,IAAA,MAAM,EAAEE,OAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CAFJ,EAMI,MAAC,KAAD;AAAO,IAAA,EAAE,EAAC,OAAV;AAAkB,IAAA,KAAK,EAAC,MAAxB;AAA+B,IAAA,GAAG,EAAE,GAApC;AAAyC,IAAA,GAAG,EAAE,GAA9C;AAAmD,IAAA,KAAK,EAAC,IAAzD;AAA8D,IAAA,IAAI,EAAC,QAAnE;AAA4E,IAAA,MAAM,EAAC,OAAnF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANJ,CADF,CADK,EAWL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIC,IAAI,CAACC,SAAL,CAAeL,KAAK,CAACM,KAArB,CAAJ,CAXK,CAAP;AAaD,CAdD;;AAgBAP,KAAK,CAACQ,eAAN,GAAwB,kBAAiB;AACvC,QAAMC,GAAG,GAAG,MAAMf,KAAK,CAAC,gFAAD,CAAvB,CADuC,CAEvC;;AAEA,QAAMgB,IAAI,GAAG,MAAMD,GAAG,CAACC,IAAJ,EAAnB;AACA,QAAM,CAACC,QAAD,EAAW,GAAGC,IAAd,IAAsBF,IAAI,CAACG,KAAL,CAAW,IAAX,CAA5B;AACA,QAAMN,KAAK,GAAGK,IAAI,CAACE,MAAL,CAAYC,CAAC,IAAIA,CAAC,CAACC,QAAF,CAAW,eAAX,CAAjB,EAA8CC,GAA9C,CAAkDF,CAAC,IAAIA,CAAC,CAACF,KAAF,CAAQ,GAAR,CAAvD,CAAd;AAEA,SAAO;AACLN,IAAAA;AADK,GAAP;AAGD,CAXD;;AAaA,eAAeP,KAAf","sourcesContent":["import fetch from 'isomorphic-unfetch';\nimport { Charts, ChartContainer, ChartRow, YAxis, LineChart } from \"react-timeseries-charts\";\n\nconst Index = (props: any) => {\n  return <div>\n    <ChartContainer timeRange={series1.timerange()} width={800}>\n      <ChartRow height=\"200\">\n          <YAxis id=\"axis1\" label=\"AUD\" min={0.5} max={1.5} width=\"60\" type=\"linear\" format=\"$,.2f\"/>\n          <Charts>\n              <LineChart axis=\"axis1\" series={series1}/>\n              <LineChart axis=\"axis2\" series={series2}/>\n          </Charts>\n          <YAxis id=\"axis2\" label=\"Euro\" min={0.5} max={1.5} width=\"80\" type=\"linear\" format=\"$,.2f\"/>\n      </ChartRow>\n  </ChartContainer>\n    <p>{JSON.stringify(props.table)}</p>\n  </div>\n}\n\nIndex.getInitialProps = async function() {\n  const res = await fetch('https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv');\n  // const data = await res.json();\n\n  const text = await res.text();\n  const [headings, ...data] = text.split('\\n');\n  const table = data.filter(e => e.includes('San Francisco')).map(e => e.split(','))\n\n  return {\n    table,\n  };\n};\n\nexport default Index;"]},"metadata":{},"sourceType":"module"}