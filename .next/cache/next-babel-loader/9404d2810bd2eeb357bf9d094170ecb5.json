{"ast":null,"code":"var _jsxFileName = \"/Users/mullens/corona/pages/index.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport fetch from 'isomorphic-unfetch';\nimport { Charts, ChartContainer, ChartRow, YAxis, Resizable, BarChart } from \"react-timeseries-charts\";\nimport { TimeSeries } from \"pondjs\";\n\nconst Index = props => {\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 10\n    }\n  }, __jsx(Resizable, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 5\n    }\n  }, __jsx(ChartContainer, {\n    timeRange: props.timerange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 7\n    }\n  }, __jsx(ChartRow, {\n    height: \"150\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 9\n    }\n  }, __jsx(YAxis, {\n    id: \"rain\",\n    label: \"Rainfall (inches/hr)\",\n    min: 0,\n    max: 1.5,\n    format: \".2f\",\n    width: \"70\",\n    type: \"linear\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 11\n    }\n  }), __jsx(Charts, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 11\n    }\n  }, __jsx(BarChart, {\n    axis: \"rain\",\n    spacing: 1,\n    columns: [\"precip\"],\n    series: props.timeseries,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 13\n    }\n  }))))), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 5\n    }\n  }, JSON.stringify(props.timeseries)));\n};\n\nIndex.getInitialProps = async function () {\n  const res = await fetch('https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv'); // const data = await res.json();\n\n  const text = await res.text();\n  const [headings, ...data] = text.split('\\n');\n  const table = data.filter(e => e.includes('San Francisco')).map(e => e.split(','));\n  const seriesData = {\n    name: \"traffic\",\n    columns: [\"time\", \"in\", \"out\"],\n    points: [[1400425947000, 52, 41], [1400425948000, 18, 45], [1400425949000, 26, 49], [1400425950000, 93, 81]]\n  };\n  const timeseries = new TimeSeries(seriesData);\n  return {\n    timeseries,\n    timerange: timeseries.timerange()\n  };\n};\n\nexport default Index;","map":{"version":3,"sources":["/Users/mullens/corona/pages/index.tsx"],"names":["fetch","Charts","ChartContainer","ChartRow","YAxis","Resizable","BarChart","TimeSeries","Index","props","timerange","timeseries","JSON","stringify","getInitialProps","res","text","headings","data","split","table","filter","e","includes","map","seriesData","name","columns","points"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,oBAAlB;AACA,SAASC,MAAT,EAAiBC,cAAjB,EAAiCC,QAAjC,EAA2CC,KAA3C,EAAkDC,SAAlD,EAA6DC,QAA7D,QAA6E,yBAA7E;AACA,SAASC,UAAT,QAAsC,QAAtC;;AAEA,MAAMC,KAAK,GAAIC,KAAD,IAA6D;AACzE,SAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACL,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,cAAD;AAAgB,IAAA,SAAS,EAAEA,KAAK,CAACC,SAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,QAAD;AAAU,IAAA,MAAM,EAAC,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,KAAD;AACE,IAAA,EAAE,EAAC,MADL;AAEE,IAAA,KAAK,EAAC,sBAFR;AAGE,IAAA,GAAG,EAAE,CAHP;AAIE,IAAA,GAAG,EAAE,GAJP;AAKE,IAAA,MAAM,EAAC,KALT;AAME,IAAA,KAAK,EAAC,IANR;AAOE,IAAA,IAAI,EAAC,QAPP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAUE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,QAAD;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,OAAO,EAAE,CAFX;AAGE,IAAA,OAAO,EAAE,CAAC,QAAD,CAHX;AAIE,IAAA,MAAM,EAAED,KAAK,CAACE,UAJhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAVF,CADF,CADF,CADK,EAwBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIC,IAAI,CAACC,SAAL,CAAeJ,KAAK,CAACE,UAArB,CAAJ,CAxBK,CAAP;AA0BD,CA3BD;;AA6BAH,KAAK,CAACM,eAAN,GAAwB,kBAAkB;AACxC,QAAMC,GAAG,GAAG,MAAMf,KAAK,CAAC,gFAAD,CAAvB,CADwC,CAExC;;AAEA,QAAMgB,IAAI,GAAG,MAAMD,GAAG,CAACC,IAAJ,EAAnB;AACA,QAAM,CAACC,QAAD,EAAW,GAAGC,IAAd,IAAsBF,IAAI,CAACG,KAAL,CAAW,IAAX,CAA5B;AACA,QAAMC,KAAK,GAAGF,IAAI,CAACG,MAAL,CAAYC,CAAC,IAAIA,CAAC,CAACC,QAAF,CAAW,eAAX,CAAjB,EAA8CC,GAA9C,CAAkDF,CAAC,IAAIA,CAAC,CAACH,KAAF,CAAQ,GAAR,CAAvD,CAAd;AAGA,QAAMM,UAAU,GAAG;AACjBC,IAAAA,IAAI,EAAE,SADW;AAEjBC,IAAAA,OAAO,EAAE,CAAC,MAAD,EAAS,IAAT,EAAe,KAAf,CAFQ;AAGjBC,IAAAA,MAAM,EAAE,CACN,CAAC,aAAD,EAAgB,EAAhB,EAAoB,EAApB,CADM,EAEN,CAAC,aAAD,EAAgB,EAAhB,EAAoB,EAApB,CAFM,EAGN,CAAC,aAAD,EAAgB,EAAhB,EAAoB,EAApB,CAHM,EAIN,CAAC,aAAD,EAAgB,EAAhB,EAAoB,EAApB,CAJM;AAHS,GAAnB;AAWA,QAAMjB,UAAU,GAAG,IAAIJ,UAAJ,CAAekB,UAAf,CAAnB;AAEA,SAAO;AACLd,IAAAA,UADK;AAELD,IAAAA,SAAS,EAAEC,UAAU,CAACD,SAAX;AAFN,GAAP;AAID,CA1BD;;AA4BA,eAAeF,KAAf","sourcesContent":["import fetch from 'isomorphic-unfetch';\nimport { Charts, ChartContainer, ChartRow, YAxis, Resizable, BarChart } from \"react-timeseries-charts\";\nimport { TimeSeries, TimeRange } from \"pondjs\";\n\nconst Index = (props: { timeseries: TimeSeries, timerange: TimeRange }) => {\n  return <div>\n    <Resizable>\n      <ChartContainer timeRange={props.timerange} >\n        <ChartRow height=\"150\">\n          <YAxis\n            id=\"rain\"\n            label=\"Rainfall (inches/hr)\"\n            min={0}\n            max={1.5}\n            format=\".2f\"\n            width=\"70\"\n            type=\"linear\"\n          />\n          <Charts>\n            <BarChart\n              axis=\"rain\"\n              spacing={1}\n              columns={[\"precip\"]}\n              series={props.timeseries}\n            />\n          </Charts>\n        </ChartRow>\n      </ChartContainer>\n    </Resizable>\n    <p>{JSON.stringify(props.timeseries)}</p>\n  </div>\n}\n\nIndex.getInitialProps = async function () {\n  const res = await fetch('https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv');\n  // const data = await res.json();\n\n  const text = await res.text();\n  const [headings, ...data] = text.split('\\n');\n  const table = data.filter(e => e.includes('San Francisco')).map(e => e.split(','))\n\n\n  const seriesData = {\n    name: \"traffic\",\n    columns: [\"time\", \"in\", \"out\"],\n    points: [\n      [1400425947000, 52, 41],\n      [1400425948000, 18, 45],\n      [1400425949000, 26, 49],\n      [1400425950000, 93, 81],\n    ]\n  };\n\n  const timeseries = new TimeSeries(seriesData);\n\n  return {\n    timeseries,\n    timerange: timeseries.timerange(),\n  };\n};\n\nexport default Index;"]},"metadata":{},"sourceType":"module"}