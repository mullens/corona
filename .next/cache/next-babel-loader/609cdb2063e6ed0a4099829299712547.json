{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _toArray from \"@babel/runtime/helpers/esm/toArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/mullens/corona/pages/index.tsx\";\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport fetch from 'isomorphic-unfetch';\nimport { Charts, ChartContainer, ChartRow, YAxis, Resizable, BarChart } from \"react-timeseries-charts\";\nimport { TimeSeries } from \"pondjs\";\n\nvar Index = function Index(props) {\n  return __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 10\n    }\n  }, __jsx(Resizable, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 5\n    }\n  }, __jsx(ChartContainer, {\n    timeRange: series.range(),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 7\n    }\n  }, __jsx(ChartRow, {\n    height: \"150\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 9\n    }\n  }, __jsx(YAxis, {\n    id: \"rain\",\n    label: \"Rainfall (inches/hr)\",\n    min: 0,\n    max: 1.5,\n    format: \".2f\",\n    width: \"70\",\n    type: \"linear\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 11\n    }\n  }), __jsx(Charts, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 11\n    }\n  }, __jsx(BarChart, {\n    axis: \"rain\",\n    style: style,\n    spacing: 1,\n    columns: [\"precip\"],\n    series: series,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 13\n    }\n  }))))), __jsx(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 5\n    }\n  }, JSON.stringify(props.timeseries)));\n};\n\nIndex.getInitialProps = function _callee() {\n  var res, text, _text$split, _text$split2, headings, data, table, seriesData, timeseries;\n\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(fetch('https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv'));\n\n        case 2:\n          res = _context.sent;\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(res.text());\n\n        case 5:\n          text = _context.sent;\n          _text$split = text.split('\\n'), _text$split2 = _toArray(_text$split), headings = _text$split2[0], data = _text$split2.slice(1);\n          table = data.filter(function (e) {\n            return e.includes('San Francisco');\n          }).map(function (e) {\n            return e.split(',');\n          });\n          seriesData = {\n            name: \"traffic\",\n            columns: [\"time\", \"in\", \"out\"],\n            points: [[1400425947000, 52, 41], [1400425948000, 18, 45], [1400425949000, 26, 49], [1400425950000, 93, 81]]\n          };\n          timeseries = new TimeSeries(seriesData);\n          return _context.abrupt(\"return\", {\n            timeseries: timeseries,\n            timerange: timeseries.timerange()\n          });\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexport default Index;","map":{"version":3,"sources":["/Users/mullens/corona/pages/index.tsx"],"names":["fetch","Charts","ChartContainer","ChartRow","YAxis","Resizable","BarChart","TimeSeries","Index","props","series","range","style","JSON","stringify","timeseries","getInitialProps","res","text","split","headings","data","table","filter","e","includes","map","seriesData","name","columns","points","timerange"],"mappings":"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","sourcesContent":["import fetch from 'isomorphic-unfetch';\nimport { Charts, ChartContainer, ChartRow, YAxis, Resizable, BarChart } from \"react-timeseries-charts\";\nimport { TimeSeries, TimeRange } from \"pondjs\";\n\nconst Index = (props: { timeseries: TimeSeries, timerange: TimeRange }) => {\n  return <div>\n    <Resizable>\n      <ChartContainer timeRange={series.range()} >\n        <ChartRow height=\"150\">\n          <YAxis\n            id=\"rain\"\n            label=\"Rainfall (inches/hr)\"\n            min={0}\n            max={1.5}\n            format=\".2f\"\n            width=\"70\"\n            type=\"linear\"\n          />\n          <Charts>\n            <BarChart\n              axis=\"rain\"\n              style={style}\n              spacing={1}\n              columns={[\"precip\"]}\n              series={series}\n            />\n          </Charts>\n        </ChartRow>\n      </ChartContainer>\n    </Resizable>\n    <p>{JSON.stringify(props.timeseries)}</p>\n  </div>\n}\n\nIndex.getInitialProps = async function () {\n  const res = await fetch('https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv');\n  // const data = await res.json();\n\n  const text = await res.text();\n  const [headings, ...data] = text.split('\\n');\n  const table = data.filter(e => e.includes('San Francisco')).map(e => e.split(','))\n\n\n  const seriesData = {\n    name: \"traffic\",\n    columns: [\"time\", \"in\", \"out\"],\n    points: [\n      [1400425947000, 52, 41],\n      [1400425948000, 18, 45],\n      [1400425949000, 26, 49],\n      [1400425950000, 93, 81],\n    ]\n  };\n\n  const timeseries = new TimeSeries(seriesData);\n\n  return {\n    timeseries,\n    timerange: timeseries.timerange(),\n  };\n};\n\nexport default Index;"]},"metadata":{},"sourceType":"module"}