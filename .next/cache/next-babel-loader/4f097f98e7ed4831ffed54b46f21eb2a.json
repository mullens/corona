{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _toArray from \"@babel/runtime/helpers/esm/toArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/mullens/corona/pages/index.tsx\";\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport fetch from 'isomorphic-unfetch';\nimport { Charts, ChartContainer, ChartRow, YAxis, Resizable, BarChart } from \"react-timeseries-charts\";\nimport { TimeSeries, Index as PondIndex } from \"pondjs\";\n\nvar Index = function Index(props) {\n  return __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 10\n    }\n  }, __jsx(Resizable, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 5\n    }\n  }, __jsx(ChartContainer, {\n    timeRange: props.timerange,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 7\n    }\n  }, __jsx(ChartRow, {\n    height: \"150\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 9\n    }\n  }, __jsx(YAxis, {\n    id: \"rain\",\n    label: \"Rainfall (inches/hr)\",\n    min: 0,\n    max: 1.5,\n    format: \".2f\",\n    width: \"70\",\n    type: \"linear\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 11\n    }\n  }), __jsx(Charts, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 11\n    }\n  }, __jsx(BarChart, {\n    axis: \"rain\",\n    spacing: 1,\n    columns: [\"precip\"],\n    series: props.timeseries,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 13\n    }\n  }))))), __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 5\n    }\n  }, \"test\"));\n};\n\nIndex.getInitialProps = function _callee() {\n  var res, text, _text$split, _text$split2, headings, data, table, seriesData, data2, series2;\n\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(fetch('https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv'));\n\n        case 2:\n          res = _context.sent;\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(res.text());\n\n        case 5:\n          text = _context.sent;\n          _text$split = text.split('\\n'), _text$split2 = _toArray(_text$split), headings = _text$split2[0], data = _text$split2.slice(1);\n          table = data.filter(function (e) {\n            return e.includes('San Francisco');\n          }).map(function (e) {\n            return e.split(',');\n          });\n          seriesData = {\n            name: \"traffic\",\n            columns: [\"time\", \"in\", \"out\"],\n            points: [[1400425947000, 52, 41], [1400425948000, 18, 45], [1400425949000, 26, 49], [1400425950000, 93, 81]]\n          };\n          data2 = [[\"2017-01-24T00:00\", 0.01], [\"2017-01-24T01:00\", 0.13], [\"2017-01-24T02:00\", 0.07], [\"2017-01-24T03:00\", 0.04], [\"2017-01-24T04:00\", 0.33], [\"2017-01-24T05:00\", 0.2], [\"2017-01-24T06:00\", 0.08], [\"2017-01-24T07:00\", 0.54], [\"2017-01-24T08:00\", 0.95], [\"2017-01-24T09:00\", 1.12], [\"2017-01-24T10:00\", 0.66], [\"2017-01-24T11:00\", 0.06], [\"2017-01-24T12:00\", 0.3], [\"2017-01-24T13:00\", 0.05], [\"2017-01-24T14:00\", 0.5], [\"2017-01-24T15:00\", 0.24], [\"2017-01-24T16:00\", 0.02], [\"2017-01-24T17:00\", 0.98], [\"2017-01-24T18:00\", 0.46], [\"2017-01-24T19:00\", 0.8], [\"2017-01-24T20:00\", 0.39], [\"2017-01-24T21:00\", 0.4], [\"2017-01-24T22:00\", 0.39], [\"2017-01-24T23:00\", 0.28]];\n          series2 = new TimeSeries({\n            name: \"hilo_rainfall\",\n            columns: [\"index\", \"precip\"],\n            points: data2.map(function (_ref) {\n              var _ref2 = _slicedToArray(_ref, 2),\n                  d = _ref2[0],\n                  value = _ref2[1];\n\n              return [PondIndex.getIndexString(\"1h\", new Date(d)), value];\n            })\n          });\n          console.log('series2', series2); // const timeseries = new TimeSeries(seriesData);\n\n          return _context.abrupt(\"return\", {\n            timeseries: series2,\n            timerange: series2.timerange()\n          });\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexport default Index;","map":{"version":3,"sources":["/Users/mullens/corona/pages/index.tsx"],"names":["fetch","Charts","ChartContainer","ChartRow","YAxis","Resizable","BarChart","TimeSeries","Index","PondIndex","props","timerange","timeseries","getInitialProps","res","text","split","headings","data","table","filter","e","includes","map","seriesData","name","columns","points","data2","series2","d","value","getIndexString","Date","console","log"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,oBAAlB;AACA,SAASC,MAAT,EAAiBC,cAAjB,EAAiCC,QAAjC,EAA2CC,KAA3C,EAAkDC,SAAlD,EAA6DC,QAA7D,QAA6E,yBAA7E;AACA,SAASC,UAAT,EAAgCC,KAAK,IAAIC,SAAzC,QAA0D,QAA1D;;AAEA,IAAMD,KAAK,GAAG,SAARA,KAAQ,CAACE,KAAD,EAA6D;AACzE,SAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACL,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,cAAD;AAAgB,IAAA,SAAS,EAAEA,KAAK,CAACC,SAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,QAAD;AAAU,IAAA,MAAM,EAAC,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,KAAD;AACE,IAAA,EAAE,EAAC,MADL;AAEE,IAAA,KAAK,EAAC,sBAFR;AAGE,IAAA,GAAG,EAAE,CAHP;AAIE,IAAA,GAAG,EAAE,GAJP;AAKE,IAAA,MAAM,EAAC,KALT;AAME,IAAA,KAAK,EAAC,IANR;AAOE,IAAA,IAAI,EAAC,QAPP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAUE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,QAAD;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,OAAO,EAAE,CAFX;AAGE,IAAA,OAAO,EAAE,CAAC,QAAD,CAHX;AAIE,IAAA,MAAM,EAAED,KAAK,CAACE,UAJhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAVF,CADF,CADF,CADK,EAyBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAzBK,CAAP;AA2BD,CA5BD;;AA8BAJ,KAAK,CAACK,eAAN,GAAwB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACJb,KAAK,CAAC,gFAAD,CADD;;AAAA;AAChBc,UAAAA,GADgB;AAAA;AAAA,2CAIHA,GAAG,CAACC,IAAJ,EAJG;;AAAA;AAIhBA,UAAAA,IAJgB;AAAA,wBAKMA,IAAI,CAACC,KAAL,CAAW,IAAX,CALN,wCAKfC,QALe,oBAKFC,IALE;AAMhBC,UAAAA,KANgB,GAMRD,IAAI,CAACE,MAAL,CAAY,UAAAC,CAAC;AAAA,mBAAIA,CAAC,CAACC,QAAF,CAAW,eAAX,CAAJ;AAAA,WAAb,EAA8CC,GAA9C,CAAkD,UAAAF,CAAC;AAAA,mBAAIA,CAAC,CAACL,KAAF,CAAQ,GAAR,CAAJ;AAAA,WAAnD,CANQ;AAShBQ,UAAAA,UATgB,GASH;AACjBC,YAAAA,IAAI,EAAE,SADW;AAEjBC,YAAAA,OAAO,EAAE,CAAC,MAAD,EAAS,IAAT,EAAe,KAAf,CAFQ;AAGjBC,YAAAA,MAAM,EAAE,CACN,CAAC,aAAD,EAAgB,EAAhB,EAAoB,EAApB,CADM,EAEN,CAAC,aAAD,EAAgB,EAAhB,EAAoB,EAApB,CAFM,EAGN,CAAC,aAAD,EAAgB,EAAhB,EAAoB,EAApB,CAHM,EAIN,CAAC,aAAD,EAAgB,EAAhB,EAAoB,EAApB,CAJM;AAHS,WATG;AAsBhBC,UAAAA,KAtBgB,GAsBR,CACZ,CAAC,kBAAD,EAAqB,IAArB,CADY,EAEZ,CAAC,kBAAD,EAAqB,IAArB,CAFY,EAGZ,CAAC,kBAAD,EAAqB,IAArB,CAHY,EAIZ,CAAC,kBAAD,EAAqB,IAArB,CAJY,EAKZ,CAAC,kBAAD,EAAqB,IAArB,CALY,EAMZ,CAAC,kBAAD,EAAqB,GAArB,CANY,EAOZ,CAAC,kBAAD,EAAqB,IAArB,CAPY,EAQZ,CAAC,kBAAD,EAAqB,IAArB,CARY,EASZ,CAAC,kBAAD,EAAqB,IAArB,CATY,EAUZ,CAAC,kBAAD,EAAqB,IAArB,CAVY,EAWZ,CAAC,kBAAD,EAAqB,IAArB,CAXY,EAYZ,CAAC,kBAAD,EAAqB,IAArB,CAZY,EAaZ,CAAC,kBAAD,EAAqB,GAArB,CAbY,EAcZ,CAAC,kBAAD,EAAqB,IAArB,CAdY,EAeZ,CAAC,kBAAD,EAAqB,GAArB,CAfY,EAgBZ,CAAC,kBAAD,EAAqB,IAArB,CAhBY,EAiBZ,CAAC,kBAAD,EAAqB,IAArB,CAjBY,EAkBZ,CAAC,kBAAD,EAAqB,IAArB,CAlBY,EAmBZ,CAAC,kBAAD,EAAqB,IAArB,CAnBY,EAoBZ,CAAC,kBAAD,EAAqB,GAArB,CApBY,EAqBZ,CAAC,kBAAD,EAAqB,IAArB,CArBY,EAsBZ,CAAC,kBAAD,EAAqB,GAArB,CAtBY,EAuBZ,CAAC,kBAAD,EAAqB,IAArB,CAvBY,EAwBZ,CAAC,kBAAD,EAAqB,IAArB,CAxBY,CAtBQ;AAiDlBC,UAAAA,OAjDkB,GAiDR,IAAItB,UAAJ,CAAe;AAC7BkB,YAAAA,IAAI,EAAE,eADuB;AAE7BC,YAAAA,OAAO,EAAE,CAAC,OAAD,EAAU,QAAV,CAFoB;AAG7BC,YAAAA,MAAM,EAAEC,KAAK,CAACL,GAAN,CAAU;AAAA;AAAA,kBAAEO,CAAF;AAAA,kBAAKC,KAAL;;AAAA,qBAAgB,CAC7BtB,SAAS,CAACuB,cAAX,CAAkC,IAAlC,EAAwC,IAAIC,IAAJ,CAASH,CAAT,CAAxC,CAD8B,EAE9BC,KAF8B,CAAhB;AAAA,aAAV;AAHqB,WAAf,CAjDQ;AA0DxBG,UAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBN,OAAvB,EA1DwB,CA4DtB;;AA5DsB,2CA8Df;AACLjB,YAAAA,UAAU,EAAEiB,OADP;AAELlB,YAAAA,SAAS,EAAEkB,OAAO,CAAClB,SAAR;AAFN,WA9De;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAxB;;AAoEA,eAAeH,KAAf","sourcesContent":["import fetch from 'isomorphic-unfetch';\nimport { Charts, ChartContainer, ChartRow, YAxis, Resizable, BarChart } from \"react-timeseries-charts\";\nimport { TimeSeries, TimeRange, Index as PondIndex } from \"pondjs\";\n\nconst Index = (props: { timeseries: TimeSeries, timerange: TimeRange }) => {\n  return <div>\n    <Resizable>\n      <ChartContainer timeRange={props.timerange} >\n        <ChartRow height=\"150\">\n          <YAxis\n            id=\"rain\"\n            label=\"Rainfall (inches/hr)\"\n            min={0}\n            max={1.5}\n            format=\".2f\"\n            width=\"70\"\n            type=\"linear\"\n          />\n          <Charts>\n            <BarChart\n              axis=\"rain\"\n              spacing={1}\n              columns={[\"precip\"]}\n              series={props.timeseries}\n            />\n          </Charts>\n        </ChartRow>\n      </ChartContainer>\n    </Resizable>\n    {/* <p>{JSON.stringify(props.timeseries)}</p> */}\n    <div>test</div>\n  </div>\n}\n\nIndex.getInitialProps = async function () {\n  const res = await fetch('https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv');\n  // const data = await res.json();\n\n  const text = await res.text();\n  const [headings, ...data] = text.split('\\n');\n  const table = data.filter(e => e.includes('San Francisco')).map(e => e.split(','))\n\n\n  const seriesData = {\n    name: \"traffic\",\n    columns: [\"time\", \"in\", \"out\"],\n    points: [\n      [1400425947000, 52, 41],\n      [1400425948000, 18, 45],\n      [1400425949000, 26, 49],\n      [1400425950000, 93, 81],\n    ]\n  };\n\n\n\n  const data2 = [\n    [\"2017-01-24T00:00\", 0.01],\n    [\"2017-01-24T01:00\", 0.13],\n    [\"2017-01-24T02:00\", 0.07],\n    [\"2017-01-24T03:00\", 0.04],\n    [\"2017-01-24T04:00\", 0.33],\n    [\"2017-01-24T05:00\", 0.2],\n    [\"2017-01-24T06:00\", 0.08],\n    [\"2017-01-24T07:00\", 0.54],\n    [\"2017-01-24T08:00\", 0.95],\n    [\"2017-01-24T09:00\", 1.12],\n    [\"2017-01-24T10:00\", 0.66],\n    [\"2017-01-24T11:00\", 0.06],\n    [\"2017-01-24T12:00\", 0.3],\n    [\"2017-01-24T13:00\", 0.05],\n    [\"2017-01-24T14:00\", 0.5],\n    [\"2017-01-24T15:00\", 0.24],\n    [\"2017-01-24T16:00\", 0.02],\n    [\"2017-01-24T17:00\", 0.98],\n    [\"2017-01-24T18:00\", 0.46],\n    [\"2017-01-24T19:00\", 0.8],\n    [\"2017-01-24T20:00\", 0.39],\n    [\"2017-01-24T21:00\", 0.4],\n    [\"2017-01-24T22:00\", 0.39],\n    [\"2017-01-24T23:00\", 0.28]\n];\n\nconst series2 = new TimeSeries({\n  name: \"hilo_rainfall\",\n  columns: [\"index\", \"precip\"],\n  points: data2.map(([d, value]) => [\n      (PondIndex.getIndexString as any)(\"1h\", new Date(d)),\n      value\n  ])\n});\n\nconsole.log('series2', series2);\n\n  // const timeseries = new TimeSeries(seriesData);\n\n  return {\n    timeseries: series2,\n    timerange: series2.timerange(),\n  };\n};\n\nexport default Index;"]},"metadata":{},"sourceType":"module"}