{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _toArray from \"@babel/runtime/helpers/esm/toArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/mullens/corona/pages/index.tsx\";\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport fetch from 'isomorphic-unfetch';\nimport { Charts, ChartContainer, ChartRow, YAxis, LineChart } from \"react-timeseries-charts\";\nimport { TimeSeries } from \"pondjs\";\n\nvar Index = function Index(props) {\n  return __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 10\n    }\n  }, __jsx(ChartContainer, {\n    timeRange: props.timeseries.timerange(),\n    width: 800,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 5\n    }\n  }, __jsx(ChartRow, {\n    height: \"200\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 7\n    }\n  }, __jsx(YAxis, {\n    id: \"axis1\",\n    label: \"AUD\",\n    min: 0.5,\n    max: 1.5,\n    width: \"60\",\n    type: \"linear\",\n    format: \"$,.2f\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 9\n    }\n  }), __jsx(Charts, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 9\n    }\n  }, __jsx(LineChart, {\n    axis: \"axis1\",\n    series: props.timeseries,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 11\n    }\n  })), __jsx(YAxis, {\n    id: \"axis2\",\n    label: \"Euro\",\n    min: 0.5,\n    max: 1.5,\n    width: \"80\",\n    type: \"linear\",\n    format: \"$,.2f\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 9\n    }\n  }))), __jsx(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 5\n    }\n  }, JSON.stringify(props.timeseries)));\n};\n\nIndex.getInitialProps = function _callee() {\n  var res, text, _text$split, _text$split2, headings, data, table, seriesData, timeseries;\n\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(fetch('https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv'));\n\n        case 2:\n          res = _context.sent;\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(res.text());\n\n        case 5:\n          text = _context.sent;\n          _text$split = text.split('\\n'), _text$split2 = _toArray(_text$split), headings = _text$split2[0], data = _text$split2.slice(1);\n          table = data.filter(function (e) {\n            return e.includes('San Francisco');\n          }).map(function (e) {\n            return e.split(',');\n          });\n          seriesData = {\n            name: \"traffic\",\n            columns: [\"time\", \"in\", \"out\"],\n            points: [[1400425947000, 52, 41], [1400425948000, 18, 45], [1400425949000, 26, 49], [1400425950000, 93, 81]]\n          };\n          timeseries = new TimeSeries(seriesData);\n          return _context.abrupt(\"return\", {\n            timeseries: timeseries\n          });\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexport default Index;","map":{"version":3,"sources":["/Users/mullens/corona/pages/index.tsx"],"names":["fetch","Charts","ChartContainer","ChartRow","YAxis","LineChart","TimeSeries","Index","props","timeseries","timerange","JSON","stringify","getInitialProps","res","text","split","headings","data","table","filter","e","includes","map","seriesData","name","columns","points"],"mappings":"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","sourcesContent":["import fetch from 'isomorphic-unfetch';\nimport { Charts, ChartContainer, ChartRow, YAxis, LineChart } from \"react-timeseries-charts\";\nimport { TimeSeries, TimeRange } from \"pondjs\";\n\nconst Index = (props: any) => {\n  return <div>\n    <ChartContainer timeRange={props.timeseries.timerange()} width={800}>\n      <ChartRow height=\"200\">\n        <YAxis id=\"axis1\" label=\"AUD\" min={0.5} max={1.5} width=\"60\" type=\"linear\" format=\"$,.2f\" />\n        <Charts>\n          <LineChart axis=\"axis1\" series={props.timeseries} />\n        </Charts>\n        <YAxis id=\"axis2\" label=\"Euro\" min={0.5} max={1.5} width=\"80\" type=\"linear\" format=\"$,.2f\" />\n      </ChartRow>\n    </ChartContainer>\n    <p>{JSON.stringify(props.timeseries)}</p>\n  </div>\n}\n\nIndex.getInitialProps = async function () {\n  const res = await fetch('https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv');\n  // const data = await res.json();\n\n  const text = await res.text();\n  const [headings, ...data] = text.split('\\n');\n  const table = data.filter(e => e.includes('San Francisco')).map(e => e.split(','))\n\n\n  const seriesData = {\n    name: \"traffic\",\n    columns: [\"time\", \"in\", \"out\"],\n    points: [\n      [1400425947000, 52, 41],\n      [1400425948000, 18, 45],\n      [1400425949000, 26, 49],\n      [1400425950000, 93, 81],\n      ]\n  };\n\n  const timeseries = new TimeSeries(seriesData);\n\n  return {\n    timeseries,\n  };\n};\n\nexport default Index;"]},"metadata":{},"sourceType":"module"}