{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _toArray from \"@babel/runtime/helpers/esm/toArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/mullens/corona/pages/index.tsx\";\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport fetch from 'isomorphic-unfetch';\nimport { Charts, ChartContainer, ChartRow, YAxis, Resizable, BarChart, styler } from \"react-timeseries-charts\";\nimport { TimeSeries, TimeRange, Index as PondIndex } from \"pondjs\";\nimport moment from 'moment';\n\nvar ChartForCity = function ChartForCity(props) {\n  var city = props.data.filter(function (e) {\n    return e[1] === props.city;\n  });\n  var data = city.map(function (e) {\n    return [e[0], e[4]];\n  });\n\n  if (!data.length) {\n    return __jsx(React.Fragment, null);\n  }\n\n  var timeseries = new TimeSeries({\n    name: \"corona\",\n    columns: [\"index\", \"cases\"],\n    points: data.map(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n          d = _ref2[0],\n          value = _ref2[1];\n\n      return [PondIndex.getIndexString(\"1h\", new Date(d)), value];\n    })\n  });\n  var style = styler([{\n    key: \"cases\",\n    color: \"#35C8E1\"\n  }]);\n  return __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 10\n    }\n  }, __jsx(\"h2\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 5\n    }\n  }, props.city, \", \", props.state), __jsx(Resizable, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 5\n    }\n  }, __jsx(ChartContainer, {\n    timeRange: new TimeRange(moment().set('day', 1).set('month', 0), moment()),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }\n  }, __jsx(ChartRow, {\n    height: \"150\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }\n  }, __jsx(YAxis, {\n    id: \"cases\",\n    label: \"Coronavirus cases\",\n    min: 0,\n    max: Math.max(timeseries.max('cases'), 1000),\n    width: \"30\",\n    type: \"linear\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 11\n    }\n  }), __jsx(Charts, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 11\n    }\n  }, __jsx(BarChart, {\n    axis: \"cases\",\n    style: style,\n    columns: [\"cases\"],\n    series: timeseries,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }\n  }))))));\n};\n\nvar Index = function Index(props) {\n  return __jsx(React.Fragment, null, __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 5\n    }\n  }, \"Last updated: \", props.lastUpdated), __jsx(ChartForCity, {\n    city: \"San Francisco\",\n    state: \"California\",\n    data: props.data,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }\n  }), __jsx(ChartForCity, {\n    city: \"Ozaukee\",\n    state: \"Wisconsin\",\n    data: props.data,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 5\n    }\n  }), __jsx(ChartForCity, {\n    city: \"King\",\n    state: \"Washington\",\n    data: props.data,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 5\n    }\n  }));\n};\n\nIndex.getInitialProps = function _callee() {\n  var res, lastUpdated, text, _text$split, _text$split2, headings, data, table;\n\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(fetch('https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv'));\n\n        case 2:\n          res = _context.sent;\n          lastUpdated = new Date().toLocaleDateString();\n          _context.next = 6;\n          return _regeneratorRuntime.awrap(res.text());\n\n        case 6:\n          text = _context.sent;\n          _text$split = text.split('\\n'), _text$split2 = _toArray(_text$split), headings = _text$split2[0], data = _text$split2.slice(1);\n          table = data.map(function (e) {\n            return e.split(',');\n          });\n          return _context.abrupt(\"return\", {\n            data: table,\n            lastUpdated: lastUpdated\n          });\n\n        case 10:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexport default Index;","map":{"version":3,"sources":["/Users/mullens/corona/pages/index.tsx"],"names":["fetch","Charts","ChartContainer","ChartRow","YAxis","Resizable","BarChart","styler","TimeSeries","TimeRange","Index","PondIndex","moment","ChartForCity","props","city","data","filter","e","map","length","timeseries","name","columns","points","d","value","getIndexString","Date","style","key","color","state","set","Math","max","lastUpdated","getInitialProps","res","toLocaleDateString","text","split","headings","table"],"mappings":"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","sourcesContent":["import fetch from 'isomorphic-unfetch';\nimport { Charts, ChartContainer, ChartRow, YAxis, Resizable, BarChart, styler } from \"react-timeseries-charts\";\nimport { TimeSeries, TimeRange, Index as PondIndex } from \"pondjs\";\nimport moment from 'moment';\n\nconst ChartForCity = (props: { data: any, city: string, state: string }) => {\n  const city = props.data.filter(e => e[1] === props.city);\n  const data = city.map(e => [e[0], e[4]]);\n\n  if (!data.length) {\n    return <></>;\n  }\n\n  const timeseries = new TimeSeries({\n    name: \"corona\",\n    columns: [\"index\", \"cases\"],\n    points: data.map(([d, value]) => [\n      (PondIndex.getIndexString as any)(\"1h\", new Date(d)),\n      value\n    ])\n  });\n\n  const style = styler([\n    { key: \"cases\", color: \"#35C8E1\"},\n]);\n\n  return <div>\n    <h2>{props.city}, {props.state}</h2>\n    <Resizable>\n      <ChartContainer timeRange={new TimeRange(moment().set('day', 1).set('month', 0), moment())} >\n        <ChartRow height=\"150\">\n          <YAxis\n            id=\"cases\"\n            label=\"Coronavirus cases\"\n            min={0}\n            max={Math.max(timeseries.max('cases'), 1000)}\n            width=\"30\"\n            type=\"linear\"\n          />\n          <Charts>\n            <BarChart\n              axis=\"cases\"\n              style={style}\n              columns={[\"cases\"]}\n              series={timeseries}\n            />\n          </Charts>\n        </ChartRow>\n      </ChartContainer>\n    </Resizable>\n  </div>\n}\n\nconst Index = (props: { data: any, lastUpdated: string }) => {\n  return <>\n    <div>\n      Last updated: {props.lastUpdated}\n    </div>\n    <ChartForCity city='San Francisco' state='California' data={props.data} />\n    <ChartForCity city='Ozaukee' state='Wisconsin' data={props.data} />\n    <ChartForCity city='King' state='Washington' data={props.data} />\n  </>\n}\n\nIndex.getInitialProps = async function () {\n  const res = await fetch('https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv');\n  const lastUpdated = (new Date()).toLocaleDateString();\n\n  const text = await res.text();\n  const [headings, ...data] = text.split('\\n');\n  const table = data.map(e => e.split(','))\n\n  return {\n    data: table,\n    lastUpdated,\n  };\n};\n\nexport default Index;"]},"metadata":{},"sourceType":"module"}