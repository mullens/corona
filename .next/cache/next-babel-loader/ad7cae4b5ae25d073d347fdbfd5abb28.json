{"ast":null,"code":"var _jsxFileName = \"/Users/mullens/corona/pages/index.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport fetch from 'isomorphic-unfetch';\nimport { Charts, ChartContainer, ChartRow, YAxis, LineChart } from \"react-timeseries-charts\";\nimport { TimeSeries } from \"pondjs\";\n\nconst Index = props => {\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 10\n    }\n  }, __jsx(ChartContainer, {\n    timeRange: props.timeseries.timerange(),\n    width: 800,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 5\n    }\n  }, __jsx(ChartRow, {\n    height: \"200\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 7\n    }\n  }, __jsx(YAxis, {\n    id: \"axis1\",\n    label: \"AUD\",\n    min: 0.5,\n    max: 1.5,\n    width: \"60\",\n    type: \"linear\",\n    format: \"$,.2f\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 9\n    }\n  }), __jsx(Charts, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 9\n    }\n  }, __jsx(LineChart, {\n    axis: \"axis1\",\n    series: props.timeseries,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 11\n    }\n  })), __jsx(YAxis, {\n    id: \"axis2\",\n    label: \"Euro\",\n    min: 0.5,\n    max: 1.5,\n    width: \"80\",\n    type: \"linear\",\n    format: \"$,.2f\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 9\n    }\n  }))), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 5\n    }\n  }, JSON.stringify(props.timeseries)));\n};\n\nIndex.getInitialProps = async function () {\n  const res = await fetch('https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv'); // const data = await res.json();\n\n  const text = await res.text();\n  const [headings, ...data] = text.split('\\n');\n  const table = data.filter(e => e.includes('San Francisco')).map(e => e.split(','));\n  const seriesData = {\n    name: \"traffic\",\n    columns: [\"time\", \"in\", \"out\"],\n    points: [[1400425947000, 52, 41], [1400425948000, 18, 45], [1400425949000, 26, 49], [1400425950000, 93, 81]]\n  };\n  const timeseries = new TimeSeries(seriesData);\n  return {\n    timeseries\n  };\n};\n\nexport default Index;","map":{"version":3,"sources":["/Users/mullens/corona/pages/index.tsx"],"names":["fetch","Charts","ChartContainer","ChartRow","YAxis","LineChart","TimeSeries","Index","props","timeseries","timerange","JSON","stringify","getInitialProps","res","text","headings","data","split","table","filter","e","includes","map","seriesData","name","columns","points"],"mappings":"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","sourcesContent":["import fetch from 'isomorphic-unfetch';\nimport { Charts, ChartContainer, ChartRow, YAxis, LineChart } from \"react-timeseries-charts\";\nimport { TimeSeries, TimeRange } from \"pondjs\";\n\nconst Index = (props: {timeseries: TimeSeries}) => {\n  return <div>\n    <ChartContainer timeRange={props.timeseries.timerange()} width={800}>\n      <ChartRow height=\"200\">\n        <YAxis id=\"axis1\" label=\"AUD\" min={0.5} max={1.5} width=\"60\" type=\"linear\" format=\"$,.2f\" />\n        <Charts>\n          <LineChart axis=\"axis1\" series={props.timeseries} />\n        </Charts>\n        <YAxis id=\"axis2\" label=\"Euro\" min={0.5} max={1.5} width=\"80\" type=\"linear\" format=\"$,.2f\" />\n      </ChartRow>\n    </ChartContainer>\n    <p>{JSON.stringify(props.timeseries)}</p>\n  </div>\n}\n\nIndex.getInitialProps = async function () {\n  const res = await fetch('https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv');\n  // const data = await res.json();\n\n  const text = await res.text();\n  const [headings, ...data] = text.split('\\n');\n  const table = data.filter(e => e.includes('San Francisco')).map(e => e.split(','))\n\n\n  const seriesData = {\n    name: \"traffic\",\n    columns: [\"time\", \"in\", \"out\"],\n    points: [\n      [1400425947000, 52, 41],\n      [1400425948000, 18, 45],\n      [1400425949000, 26, 49],\n      [1400425950000, 93, 81],\n      ]\n  };\n\n  const timeseries = new TimeSeries(seriesData);\n\n  return {\n    timeseries,\n  };\n};\n\nexport default Index;"]},"metadata":{},"sourceType":"module"}