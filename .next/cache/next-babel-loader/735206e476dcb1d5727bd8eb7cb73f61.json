{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _toArray from \"@babel/runtime/helpers/esm/toArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/mullens/corona/pages/index.tsx\";\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport fetch from 'isomorphic-unfetch';\nimport { Charts, ChartContainer, ChartRow, YAxis, Resizable, BarChart, styler } from \"react-timeseries-charts\";\nimport { TimeSeries, TimeRange, Index as PondIndex } from \"pondjs\";\nimport moment from 'moment';\n\nvar ChartForCity = function ChartForCity(props) {\n  var city = props.data.filter(function (e) {\n    return e[1] === props.city;\n  });\n  var data = city.map(function (e) {\n    return [e[0], e[4]];\n  });\n\n  if (!data.length) {\n    return __jsx(React.Fragment, null);\n  }\n\n  var millions = props.pop / 1000000;\n  var timeseries = new TimeSeries({\n    name: \"corona\",\n    columns: [\"index\", \"cases\"],\n    points: data.map(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n          d = _ref2[0],\n          value = _ref2[1];\n\n      return [PondIndex.getIndexString(\"1d\", new Date(d)), value / millions];\n    })\n  });\n  var style = styler([{\n    key: \"cases\",\n    color: \"#35C8E1\"\n  }]);\n  var todayCount = data[data.length - 1][1];\n  var todayCountPer = data[data.length - 1][1] / millions;\n  var yesterdayCount = data[data.length - 2][1]; // const symbol = todayCount > yesterdayCount ? '+' : '-';\n\n  var diff = (todayCount - yesterdayCount) / yesterdayCount;\n  var rounded = 100 * Math.round(diff * 1000) / 1000;\n  return __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 10\n    }\n  }, __jsx(\"h2\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 5\n    }\n  }, props.city, \", \", props.state), __jsx(Resizable, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }\n  }, __jsx(ChartContainer, {\n    timeRange: new TimeRange(moment({\n      year: 2020,\n      month: 2,\n      day: 1\n    }), moment()),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }\n  }, __jsx(ChartRow, {\n    height: \"150\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }\n  }, __jsx(YAxis, {\n    id: \"cases\",\n    label: \"Coronavirus cases\",\n    min: 0,\n    max: props.max / millions,\n    width: \"30\",\n    type: \"linear\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 11\n    }\n  }), __jsx(Charts, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 11\n    }\n  }, __jsx(BarChart, {\n    axis: \"cases\",\n    style: style,\n    columns: [\"cases\"],\n    series: timeseries,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }\n  }))))), __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 5\n    }\n  }, todayCount, \" cases today (\", rounded > 0 ? '+' : '', rounded, \"% compared to yesterday)\"), __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 5\n    }\n  }, Math.round(todayCountPer * 1000) / 1000, \" per million people today\"));\n};\n\nvar Index = function Index(props) {\n  return __jsx(React.Fragment, null, __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 5\n    }\n  }, \"Last updated: \", props.lastUpdated), __jsx(ChartForCity, {\n    city: \"San Francisco\",\n    state: \"California\",\n    data: props.data,\n    max: props.max,\n    pop: 884363,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 5\n    }\n  }), __jsx(ChartForCity, {\n    city: \"Ozaukee\",\n    state: \"Wisconsin\",\n    data: props.data,\n    max: props.max,\n    pop: 88429,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 5\n    }\n  }), __jsx(ChartForCity, {\n    city: \"King\",\n    state: \"Washington\",\n    data: props.data,\n    max: props.max,\n    pop: 2189000,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 5\n    }\n  }));\n};\n\nIndex.getInitialProps = function _callee() {\n  var res, lastUpdated, text, _text$split, _text$split2, headings, data, table, max;\n\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(fetch('https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv'));\n\n        case 2:\n          res = _context.sent;\n          lastUpdated = new Date().toLocaleDateString();\n          _context.next = 6;\n          return _regeneratorRuntime.awrap(res.text());\n\n        case 6:\n          text = _context.sent;\n          _text$split = text.split('\\n'), _text$split2 = _toArray(_text$split), headings = _text$split2[0], data = _text$split2.slice(1);\n          table = data.map(function (e) {\n            return e.split(',');\n          });\n          max = Math.max.apply(Math, _toConsumableArray(table.filter(function (e) {\n            return e.includes('King');\n          }).map(function (e) {\n            return Number.parseInt(e[4]);\n          })));\n          return _context.abrupt(\"return\", {\n            data: table,\n            lastUpdated: lastUpdated,\n            max: max\n          });\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexport default Index;","map":{"version":3,"sources":["/Users/mullens/corona/pages/index.tsx"],"names":["fetch","Charts","ChartContainer","ChartRow","YAxis","Resizable","BarChart","styler","TimeSeries","TimeRange","Index","PondIndex","moment","ChartForCity","props","city","data","filter","e","map","length","millions","pop","timeseries","name","columns","points","d","value","getIndexString","Date","style","key","color","todayCount","todayCountPer","yesterdayCount","diff","rounded","Math","round","state","year","month","day","max","lastUpdated","getInitialProps","res","toLocaleDateString","text","split","headings","table","includes","Number","parseInt"],"mappings":"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","sourcesContent":["import fetch from 'isomorphic-unfetch';\nimport { Charts, ChartContainer, ChartRow, YAxis, Resizable, BarChart, styler } from \"react-timeseries-charts\";\nimport { TimeSeries, TimeRange, Index as PondIndex } from \"pondjs\";\nimport moment from 'moment';\n\nconst ChartForCity = (props: { data: any, city: string, state: string, max: number, pop: number }) => {\n  const city = props.data.filter(e => e[1] === props.city);\n  const data = city.map(e => [e[0], e[4]]);\n\n  if (!data.length) {\n    return <></>;\n  }\n\n  const millions = props.pop / 1000000\n\n  const timeseries = new TimeSeries({\n    name: \"corona\",\n    columns: [\"index\", \"cases\"],\n    points: data.map(([d, value]) => [\n      (PondIndex.getIndexString as any)(\"1d\", new Date(d)),\n      value / millions\n    ])\n  });\n\n  const style = styler([\n    { key: \"cases\", color: \"#35C8E1\" },\n  ]);\n\n  const todayCount = data[data.length - 1][1];\n  const todayCountPer = data[data.length - 1][1] / millions;\n  const yesterdayCount = data[data.length - 2][1];\n\n  // const symbol = todayCount > yesterdayCount ? '+' : '-';\n  const diff = (todayCount - yesterdayCount) / yesterdayCount;\n  const rounded = 100 * Math.round(diff * 1000) / 1000;\n\n\n  return <div>\n    <h2>{props.city}, {props.state}</h2>\n    <Resizable>\n      <ChartContainer timeRange={new TimeRange(moment({ year: 2020, month: 2, day: 1 }), moment())} >\n        <ChartRow height=\"150\">\n          <YAxis\n            id=\"cases\"\n            label=\"Coronavirus cases\"\n            min={0}\n            max={props.max / millions}\n            width=\"30\"\n            type=\"linear\"\n          />\n          <Charts>\n            <BarChart\n              axis=\"cases\"\n              style={style}\n              columns={[\"cases\"]}\n              series={timeseries}\n            />\n          </Charts>\n        </ChartRow>\n      </ChartContainer>\n    </Resizable>\n    <div>{todayCount} cases today ({rounded > 0 ? '+' : ''}{rounded}% compared to yesterday)</div>\n    <div>{Math.round(todayCountPer * 1000) / 1000} per million people today</div>\n  </div>\n}\n\nconst Index = (props: { data: any, lastUpdated: string, max: number }) => {\n  return <>\n    <div>\n      Last updated: {props.lastUpdated}\n    </div>\n    <ChartForCity city='San Francisco' state='California' data={props.data} max={props.max} pop={884363} />\n    <ChartForCity city='Ozaukee' state='Wisconsin' data={props.data} max={props.max} pop={88429} />\n    <ChartForCity city='King' state='Washington' data={props.data} max={props.max} pop={2189000} />\n  </>\n}\n\nIndex.getInitialProps = async function () {\n  const res = await fetch('https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv');\n  const lastUpdated = (new Date()).toLocaleDateString();\n\n  const text = await res.text();\n  const [headings, ...data] = text.split('\\n');\n  const table = data.map(e => e.split(','))\n  const max = Math.max(...table.filter(e => e.includes('King')).map(e => Number.parseInt(e[4])));\n\n  return {\n    data: table,\n    lastUpdated,\n    max\n  };\n};\n\nexport default Index;"]},"metadata":{},"sourceType":"module"}