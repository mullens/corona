{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _toArray from \"@babel/runtime/helpers/esm/toArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/mullens/corona/pages/index.tsx\";\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport fetch from 'isomorphic-unfetch';\nimport { Charts, ChartContainer, ChartRow, YAxis, Resizable, BarChart } from \"react-timeseries-charts\";\nimport { TimeSeries, Index as PondIndex } from \"pondjs\";\n\nvar ChartForCity = function ChartForCity(props) {\n  var city = props.data.filter(function (e) {\n    return e.includes(props.city);\n  });\n  var data = city.map(function (e) {\n    return [e[0], e[4]];\n  });\n  var timeseries = new TimeSeries({\n    name: \"corona\",\n    columns: [\"index\", \"cases\"],\n    points: data.map(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n          d = _ref2[0],\n          value = _ref2[1];\n\n      return [PondIndex.getIndexString(\"1h\", new Date(d)), value];\n    })\n  });\n  return __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 10\n    }\n  }, __jsx(Resizable, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 5\n    }\n  }, __jsx(ChartContainer, {\n    timeRange: timeseries.timerange(),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }\n  }, __jsx(ChartRow, {\n    height: \"150\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 9\n    }\n  }, __jsx(YAxis, {\n    id: \"cases\",\n    label: \"Coronavirus cases\",\n    min: 0,\n    max: timeseries.max('cases'),\n    type: \"linear\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 11\n    }\n  }), __jsx(Charts, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 11\n    }\n  }, __jsx(BarChart, {\n    axis: \"cases\",\n    columns: [\"cases\"],\n    series: timeseries,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }\n  }))))));\n};\n\nvar Index = function Index(props) {\n  return __jsx(ChartForCity, {\n    city: \"San Francisco\",\n    data: props.data,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 10\n    }\n  });\n};\n\nIndex.getInitialProps = function _callee() {\n  var res, text, _text$split, _text$split2, headings, data, table, data2;\n\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(fetch('https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv'));\n\n        case 2:\n          res = _context.sent;\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(res.text());\n\n        case 5:\n          text = _context.sent;\n          _text$split = text.split('\\n'), _text$split2 = _toArray(_text$split), headings = _text$split2[0], data = _text$split2.slice(1);\n          table = data.map(function (e) {\n            return e.split(',');\n          });\n          data2 = [[\"2017-01-24T00:00\", 0.01], [\"2017-01-24T01:00\", 0.13], [\"2017-01-24T02:00\", 0.07], [\"2017-01-24T03:00\", 0.04], [\"2017-01-24T04:00\", 0.33]]; // const timeseries = new TimeSeries(seriesData);\n\n          return _context.abrupt(\"return\", {\n            data: table\n          });\n\n        case 10:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexport default Index;","map":{"version":3,"sources":["/Users/mullens/corona/pages/index.tsx"],"names":["fetch","Charts","ChartContainer","ChartRow","YAxis","Resizable","BarChart","TimeSeries","Index","PondIndex","ChartForCity","props","city","data","filter","e","includes","map","timeseries","name","columns","points","d","value","getIndexString","Date","timerange","max","getInitialProps","res","text","split","headings","table","data2"],"mappings":"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","sourcesContent":["import fetch from 'isomorphic-unfetch';\nimport { Charts, ChartContainer, ChartRow, YAxis, Resizable, BarChart } from \"react-timeseries-charts\";\nimport { TimeSeries, TimeRange, Index as PondIndex } from \"pondjs\";\n\nconst ChartForCity = (props: {data: any, city: string}) => {\n  const city = props.data.filter(e => e.includes(props.city));\n  const data = city.map(e => [e[0], e[4]]);\n\n  const timeseries = new TimeSeries({\n    name: \"corona\",\n    columns: [\"index\", \"cases\"],\n    points: data.map(([d, value]) => [\n        (PondIndex.getIndexString as any)(\"1h\", new Date(d)),\n        value\n    ])\n  });\n\n  return <div>\n    <Resizable>\n      <ChartContainer timeRange={timeseries.timerange()} >\n        <ChartRow height=\"150\">\n          <YAxis\n            id=\"cases\"\n            label=\"Coronavirus cases\"\n            min={0}\n            max={timeseries.max('cases')}\n            type=\"linear\"\n          />\n          <Charts>\n            <BarChart\n              axis=\"cases\"\n              columns={[\"cases\"]}\n              series={timeseries}\n            />\n          </Charts>\n        </ChartRow>\n      </ChartContainer>\n    </Resizable>\n  </div>\n}\n\nconst Index = (props: { data: any }) => {\n  return <ChartForCity city='San Francisco' data={props.data} />\n}\n\nIndex.getInitialProps = async function () {\n  const res = await fetch('https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv');\n  // const data = await res.json();\n\n  const text = await res.text();\n  const [headings, ...data] = text.split('\\n');\n  const table = data.map(e => e.split(','))\n\n  const data2 = [\n    [\"2017-01-24T00:00\", 0.01],\n    [\"2017-01-24T01:00\", 0.13],\n    [\"2017-01-24T02:00\", 0.07],\n    [\"2017-01-24T03:00\", 0.04],\n    [\"2017-01-24T04:00\", 0.33],\n  ];\n\n\n  // const timeseries = new TimeSeries(seriesData);\n\n  return {\n    data: table,\n  };\n};\n\nexport default Index;"]},"metadata":{},"sourceType":"module"}