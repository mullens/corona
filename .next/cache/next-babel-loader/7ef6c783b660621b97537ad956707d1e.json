{"ast":null,"code":"var _jsxFileName = \"/Users/mullens/corona/pages/index.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport fetch from 'isomorphic-unfetch';\nimport { Charts, ChartContainer, ChartRow, YAxis, Resizable, BarChart } from \"react-timeseries-charts\";\nimport { TimeSeries, Index as PondIndex } from \"pondjs\";\n\nconst ChartForCity = props => {\n  const city = props.data.filter(e => e.includes(props.city));\n  const data = city.map(e => [e[0], e[4]]);\n  const timeseries = new TimeSeries({\n    name: \"corona\",\n    columns: [\"index\", \"cases\"],\n    points: data.map(([d, value]) => [PondIndex.getIndexString(\"1h\", new Date(d)), value])\n  });\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 10\n    }\n  }, __jsx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 5\n    }\n  }, props.city), __jsx(Resizable, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 5\n    }\n  }, __jsx(ChartContainer, {\n    timeRange: timeseries.timerange(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }\n  }, __jsx(ChartRow, {\n    height: \"150\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 9\n    }\n  }, __jsx(YAxis, {\n    id: \"cases\",\n    label: \"Coronavirus cases\",\n    min: 0,\n    max: timeseries.max('cases'),\n    type: \"linear\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 11\n    }\n  }), __jsx(Charts, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 11\n    }\n  }, __jsx(BarChart, {\n    axis: \"cases\",\n    columns: [\"cases\"],\n    series: timeseries,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }\n  }))))));\n};\n\nconst Index = props => {\n  return __jsx(React.Fragment, null, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 5\n    }\n  }, \"Last updated: \", props.lastUpdated.toLocaleDateString()), __jsx(ChartForCity, {\n    city: \"San Francisco\",\n    data: props.data,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }\n  }));\n};\n\nIndex.getInitialProps = async function () {\n  const res = await fetch('https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv');\n  const lastUpdated = Date.now();\n  const text = await res.text();\n  const [headings, ...data] = text.split('\\n');\n  const table = data.map(e => e.split(','));\n  return {\n    data: table,\n    lastUpdated\n  };\n};\n\nexport default Index;","map":{"version":3,"sources":["/Users/mullens/corona/pages/index.tsx"],"names":["fetch","Charts","ChartContainer","ChartRow","YAxis","Resizable","BarChart","TimeSeries","Index","PondIndex","ChartForCity","props","city","data","filter","e","includes","map","timeseries","name","columns","points","d","value","getIndexString","Date","timerange","max","lastUpdated","toLocaleDateString","getInitialProps","res","now","text","headings","split","table"],"mappings":"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","sourcesContent":["import fetch from 'isomorphic-unfetch';\nimport { Charts, ChartContainer, ChartRow, YAxis, Resizable, BarChart } from \"react-timeseries-charts\";\nimport { TimeSeries, TimeRange, Index as PondIndex } from \"pondjs\";\n\nconst ChartForCity = (props: { data: any, city: string }) => {\n  const city = props.data.filter(e => e.includes(props.city));\n  const data = city.map(e => [e[0], e[4]]);\n\n  const timeseries = new TimeSeries({\n    name: \"corona\",\n    columns: [\"index\", \"cases\"],\n    points: data.map(([d, value]) => [\n      (PondIndex.getIndexString as any)(\"1h\", new Date(d)),\n      value\n    ])\n  });\n\n  return <div>\n    <h2>{props.city}</h2>\n    <Resizable>\n      <ChartContainer timeRange={timeseries.timerange()} >\n        <ChartRow height=\"150\">\n          <YAxis\n            id=\"cases\"\n            label=\"Coronavirus cases\"\n            min={0}\n            max={timeseries.max('cases')}\n            type=\"linear\"\n          />\n          <Charts>\n            <BarChart\n              axis=\"cases\"\n              columns={[\"cases\"]}\n              series={timeseries}\n            />\n          </Charts>\n        </ChartRow>\n      </ChartContainer>\n    </Resizable>\n  </div>\n}\n\nconst Index = (props: { data: any, lastUpdated: Date }) => {\n  return <>\n    <div>\n      Last updated: {props.lastUpdated.toLocaleDateString()}\n    </div>\n    <ChartForCity city='San Francisco' data={props.data} />\n  </>\n}\n\nIndex.getInitialProps = async function () {\n  const res = await fetch('https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv');\n  const lastUpdated = Date.now();\n\n  const text = await res.text();\n  const [headings, ...data] = text.split('\\n');\n  const table = data.map(e => e.split(','))\n\n  return {\n    data: table,\n    lastUpdated,\n  };\n};\n\nexport default Index;"]},"metadata":{},"sourceType":"module"}