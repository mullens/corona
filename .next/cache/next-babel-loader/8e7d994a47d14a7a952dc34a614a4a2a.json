{"ast":null,"code":"var _jsxFileName = \"/Users/mullens/corona/pages/index.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport fetch from 'isomorphic-unfetch';\nimport { Charts, ChartContainer, ChartRow, YAxis, Resizable, BarChart, styler } from \"react-timeseries-charts\";\nimport { TimeSeries, TimeRange, Index as PondIndex } from \"pondjs\";\nimport moment from 'moment';\n\nconst ChartForCity = props => {\n  const city = props.data.filter(e => e[1] === props.city);\n  const data = city.map(e => [e[0], e[4]]);\n\n  if (!data.length) {\n    return __jsx(React.Fragment, null);\n  }\n\n  const millions = props.pop / 1000000;\n  const timeseries = new TimeSeries({\n    name: \"corona\",\n    columns: [\"index\", \"cases\"],\n    points: data.map(([d, value]) => [PondIndex.getIndexString(\"1d\", new Date(d)), value / millions])\n  });\n  const style = styler([{\n    key: \"cases\",\n    color: \"#35C8E1\"\n  }]);\n  const todayCount = data[data.length - 1][1];\n  const todayCountPer = data[data.length - 1][1] / millions;\n  const yesterdayCount = data[data.length - 2][1]; // const symbol = todayCount > yesterdayCount ? '+' : '-';\n\n  const diff = (todayCount - yesterdayCount) / yesterdayCount;\n  const rounded = 100 * Math.round(diff * 1000) / 1000;\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 10\n    }\n  }, __jsx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 5\n    }\n  }, props.city, \", \", props.state), __jsx(Resizable, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }\n  }, __jsx(ChartContainer, {\n    timeRange: new TimeRange(moment({\n      year: 2020,\n      month: 2,\n      day: 1\n    }), moment()),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }\n  }, __jsx(ChartRow, {\n    height: \"150\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }\n  }, __jsx(YAxis, {\n    id: \"cases\",\n    label: \"Coronavirus cases\",\n    min: 0,\n    max: props.max / millions,\n    width: \"30\",\n    type: \"linear\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 11\n    }\n  }), __jsx(Charts, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 11\n    }\n  }, __jsx(BarChart, {\n    axis: \"cases\",\n    style: style,\n    columns: [\"cases\"],\n    series: timeseries,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }\n  }))))), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 5\n    }\n  }, todayCount, \" (\", rounded > 0 ? '+' : '', rounded, \"%) cases today\"), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 5\n    }\n  }, Math.round(todayCountPer * 1000) / 1000, \" per million people today\"));\n};\n\nconst Index = props => {\n  return __jsx(React.Fragment, null, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 5\n    }\n  }, \"Last updated: \", props.lastUpdated), __jsx(ChartForCity, {\n    city: \"San Francisco\",\n    state: \"California\",\n    data: props.data,\n    max: props.max,\n    pop: 884363,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 5\n    }\n  }), __jsx(ChartForCity, {\n    city: \"Ozaukee\",\n    state: \"Wisconsin\",\n    data: props.data,\n    max: props.max,\n    pop: 88429,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 5\n    }\n  }), __jsx(ChartForCity, {\n    city: \"King\",\n    state: \"Washington\",\n    data: props.data,\n    max: props.max,\n    pop: 2189000,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 5\n    }\n  }));\n};\n\nIndex.getInitialProps = async function () {\n  const res = await fetch('https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv');\n  const lastUpdated = new Date().toLocaleDateString();\n  const text = await res.text();\n  const [headings, ...data] = text.split('\\n');\n  const table = data.map(e => e.split(','));\n  const max = Math.max(...table.filter(e => e.includes('King')).map(e => Number.parseInt(e[4])));\n  return {\n    data: table,\n    lastUpdated,\n    max\n  };\n};\n\nexport default Index;","map":{"version":3,"sources":["/Users/mullens/corona/pages/index.tsx"],"names":["fetch","Charts","ChartContainer","ChartRow","YAxis","Resizable","BarChart","styler","TimeSeries","TimeRange","Index","PondIndex","moment","ChartForCity","props","city","data","filter","e","map","length","millions","pop","timeseries","name","columns","points","d","value","getIndexString","Date","style","key","color","todayCount","todayCountPer","yesterdayCount","diff","rounded","Math","round","state","year","month","day","max","lastUpdated","getInitialProps","res","toLocaleDateString","text","headings","split","table","includes","Number","parseInt"],"mappings":"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","sourcesContent":["import fetch from 'isomorphic-unfetch';\nimport { Charts, ChartContainer, ChartRow, YAxis, Resizable, BarChart, styler } from \"react-timeseries-charts\";\nimport { TimeSeries, TimeRange, Index as PondIndex } from \"pondjs\";\nimport moment from 'moment';\n\nconst ChartForCity = (props: { data: any, city: string, state: string, max: number, pop: number }) => {\n  const city = props.data.filter(e => e[1] === props.city);\n  const data = city.map(e => [e[0], e[4]]);\n\n  if (!data.length) {\n    return <></>;\n  }\n\n  const millions = props.pop / 1000000\n\n  const timeseries = new TimeSeries({\n    name: \"corona\",\n    columns: [\"index\", \"cases\"],\n    points: data.map(([d, value]) => [\n      (PondIndex.getIndexString as any)(\"1d\", new Date(d)),\n      value / millions\n    ])\n  });\n\n  const style = styler([\n    { key: \"cases\", color: \"#35C8E1\" },\n  ]);\n\n  const todayCount = data[data.length - 1][1];\n  const todayCountPer = data[data.length - 1][1] / millions;\n  const yesterdayCount = data[data.length - 2][1];\n\n  // const symbol = todayCount > yesterdayCount ? '+' : '-';\n  const diff = (todayCount - yesterdayCount) / yesterdayCount;\n  const rounded = 100 * Math.round(diff * 1000) / 1000;\n\n\n  return <div>\n    <h2>{props.city}, {props.state}</h2>\n    <Resizable>\n      <ChartContainer timeRange={new TimeRange(moment({ year: 2020, month: 2, day: 1 }), moment())} >\n        <ChartRow height=\"150\">\n          <YAxis\n            id=\"cases\"\n            label=\"Coronavirus cases\"\n            min={0}\n            max={props.max / millions}\n            width=\"30\"\n            type=\"linear\"\n          />\n          <Charts>\n            <BarChart\n              axis=\"cases\"\n              style={style}\n              columns={[\"cases\"]}\n              series={timeseries}\n            />\n          </Charts>\n        </ChartRow>\n      </ChartContainer>\n    </Resizable>\n    <div>{todayCount} ({rounded > 0 ? '+' : ''}{rounded}%) cases today</div>\n    <div>{Math.round(todayCountPer * 1000) / 1000} per million people today</div>\n  </div>\n}\n\nconst Index = (props: { data: any, lastUpdated: string, max: number }) => {\n  return <>\n    <div>\n      Last updated: {props.lastUpdated}\n    </div>\n    <ChartForCity city='San Francisco' state='California' data={props.data} max={props.max} pop={884363} />\n    <ChartForCity city='Ozaukee' state='Wisconsin' data={props.data} max={props.max} pop={88429} />\n    <ChartForCity city='King' state='Washington' data={props.data} max={props.max} pop={2189000} />\n  </>\n}\n\nIndex.getInitialProps = async function () {\n  const res = await fetch('https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv');\n  const lastUpdated = (new Date()).toLocaleDateString();\n\n  const text = await res.text();\n  const [headings, ...data] = text.split('\\n');\n  const table = data.map(e => e.split(','))\n  const max = Math.max(...table.filter(e => e.includes('King')).map(e => Number.parseInt(e[4])));\n\n  return {\n    data: table,\n    lastUpdated,\n    max\n  };\n};\n\nexport default Index;"]},"metadata":{},"sourceType":"module"}