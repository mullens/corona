{"ast":null,"code":"var _jsxFileName = \"/Users/mullens/corona/pages/index.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport fetch from 'isomorphic-unfetch';\nimport { Charts, ChartContainer, ChartRow, YAxis, Resizable, BarChart } from \"react-timeseries-charts\";\nimport { TimeSeries, Index as PondIndex } from \"pondjs\";\n\nconst Index = props => {\n  const timeseries = new TimeSeries({\n    name: \"hilo_rainfall\",\n    columns: [\"index\", \"precip\"],\n    points: props.data.map(([d, value]) => [PondIndex.getIndexString(\"1h\", new Date(d)), value])\n  });\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 10\n    }\n  }, __jsx(Resizable, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 5\n    }\n  }, __jsx(ChartContainer, {\n    timeRange: timeseries.timerange(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }\n  }, __jsx(ChartRow, {\n    height: \"150\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 9\n    }\n  }, __jsx(YAxis, {\n    id: \"rain\",\n    label: \"Rainfall (inches/hr)\",\n    min: 0,\n    max: 1.5,\n    format: \".2f\",\n    width: \"70\",\n    type: \"linear\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 11\n    }\n  }), __jsx(Charts, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 11\n    }\n  }, __jsx(BarChart, {\n    axis: \"rain\",\n    spacing: 1,\n    columns: [\"precip\"],\n    series: timeseries,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }\n  }))))), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }\n  }, JSON.stringify(props.data)));\n};\n\nIndex.getInitialProps = async function () {\n  const res = await fetch('https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv'); // const data = await res.json();\n\n  const text = await res.text();\n  const [headings, ...data] = text.split('\\n');\n  const table = data.filter(e => e.includes('San Francisco')).map(e => e.split(','));\n  const data2 = [[\"2017-01-24T00:00\", 0.01], [\"2017-01-24T01:00\", 0.13], [\"2017-01-24T02:00\", 0.07], [\"2017-01-24T03:00\", 0.04], [\"2017-01-24T04:00\", 0.33]]; // const timeseries = new TimeSeries(seriesData);\n\n  return {\n    data: data\n  };\n};\n\nexport default Index;","map":{"version":3,"sources":["/Users/mullens/corona/pages/index.tsx"],"names":["fetch","Charts","ChartContainer","ChartRow","YAxis","Resizable","BarChart","TimeSeries","Index","PondIndex","props","timeseries","name","columns","points","data","map","d","value","getIndexString","Date","timerange","JSON","stringify","getInitialProps","res","text","headings","split","table","filter","e","includes","data2"],"mappings":"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","sourcesContent":["import fetch from 'isomorphic-unfetch';\nimport { Charts, ChartContainer, ChartRow, YAxis, Resizable, BarChart } from \"react-timeseries-charts\";\nimport { TimeSeries, TimeRange, Index as PondIndex } from \"pondjs\";\n\nconst Index = (props: { data: any }) => {\n\n\nconst timeseries = new TimeSeries({\n  name: \"hilo_rainfall\",\n  columns: [\"index\", \"precip\"],\n  points: props.data.map(([d, value]) => [\n      (PondIndex.getIndexString as any)(\"1h\", new Date(d)),\n      value\n  ])\n});\n\n  return <div>\n    <Resizable>\n      <ChartContainer timeRange={timeseries.timerange()} >\n        <ChartRow height=\"150\">\n          <YAxis\n            id=\"rain\"\n            label=\"Rainfall (inches/hr)\"\n            min={0}\n            max={1.5}\n            format=\".2f\"\n            width=\"70\"\n            type=\"linear\"\n          />\n          <Charts>\n            <BarChart\n              axis=\"rain\"\n              spacing={1}\n              columns={[\"precip\"]}\n              series={timeseries}\n            />\n          </Charts>\n        </ChartRow>\n      </ChartContainer>\n    </Resizable>\n    {/* <p>{JSON.stringify(props.timeseries)}</p> */}\n    <div>{JSON.stringify(props.data)}</div>\n  </div>\n}\n\nIndex.getInitialProps = async function () {\n  const res = await fetch('https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv');\n  // const data = await res.json();\n\n  const text = await res.text();\n  const [headings, ...data] = text.split('\\n');\n  const table = data.filter(e => e.includes('San Francisco')).map(e => e.split(','))\n\n  const data2 = [\n    [\"2017-01-24T00:00\", 0.01],\n    [\"2017-01-24T01:00\", 0.13],\n    [\"2017-01-24T02:00\", 0.07],\n    [\"2017-01-24T03:00\", 0.04],\n    [\"2017-01-24T04:00\", 0.33],\n  ];\n\n\n  // const timeseries = new TimeSeries(seriesData);\n\n  return {\n    data: data,\n  };\n};\n\nexport default Index;"]},"metadata":{},"sourceType":"module"}