{"version":3,"file":"static/webpack/static/development/pages/index.js.33e1451178a2f6b2c62f.hot-update.js","sources":["webpack:///./pages/index.tsx"],"sourcesContent":["import fetch from 'isomorphic-unfetch';\nimport { Charts, ChartContainer, ChartRow, YAxis, Resizable, BarChart, styler } from \"react-timeseries-charts\";\nimport { TimeSeries, TimeRange, Index as PondIndex } from \"pondjs\";\nimport moment from 'moment';\n\nconst ChartForCity = (props: { data: any, city: string, state: string, max: number, pop: number }) => {\n  const city = props.data.filter(e => e[1] === props.city);\n  const data = city.map(e => [e[0], e[4]]);\n\n  if (!data.length) {\n    return <></>;\n  }\n\n  const millions = props.pop / 1000000\n\n  const timeseries = new TimeSeries({\n    name: \"corona\",\n    columns: [\"index\", \"cases\"],\n    points: data.map(([d, value]) => [\n      (PondIndex.getIndexString as any)(\"1d\", new Date(d)),\n      value / millions\n    ])\n  });\n\n  const style = styler([\n    { key: \"cases\", color: \"#35C8E1\" },\n  ]);\n\n  const todayCount = data[data.length - 1][1];\n  const todayCountPer = data[data.length - 1][1] / millions;\n  const yesterdayCount = data[data.length - 2][1];\n\n  // const symbol = todayCount > yesterdayCount ? '+' : '-';\n  const diff = (todayCount - yesterdayCount) / yesterdayCount;\n  const rounded = 100 * Math.round(diff * 1000) / 1000;\n\n\n  return <div>\n    <h2>{props.city}, {props.state}</h2>\n    <Resizable>\n      <ChartContainer timeRange={new TimeRange(moment({ year: 2020, month: 2, day: 1 }), moment())} >\n        <ChartRow height=\"150\">\n          <YAxis\n            id=\"cases\"\n            label=\"Coronavirus cases\"\n            min={0}\n            max={props.max / millions}\n            width=\"30\"\n            type=\"linear\"\n          />\n          <Charts>\n            <BarChart\n              axis=\"cases\"\n              style={style}\n              columns={[\"cases\"]}\n              series={timeseries}\n            />\n          </Charts>\n        </ChartRow>\n      </ChartContainer>\n    </Resizable>\n    <h6>Today</h6>\n    <div>{todayCount} ({rounded > 0 ? '+' : ''}{rounded}%) total today</div>\n    <div>{Math.round(todayCountPer * 1000) / 1000} per million people</div>\n  </div>\n}\n\nconst Index = (props: { data: any, lastUpdated: string, max: number }) => {\n  return <>\n    <div>\n      Last updated: {props.lastUpdated}\n    </div>\n    <ChartForCity city='San Francisco' state='California' data={props.data} max={props.max} pop={884363} />\n    <ChartForCity city='Ozaukee' state='Wisconsin' data={props.data} max={props.max} pop={88429} />\n    <ChartForCity city='King' state='Washington' data={props.data} max={props.max} pop={2189000} />\n  </>\n}\n\nIndex.getInitialProps = async function () {\n  const res = await fetch('https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv');\n  const lastUpdated = (new Date()).toLocaleDateString();\n\n  const text = await res.text();\n  const [headings, ...data] = text.split('\\n');\n  const table = data.map(e => e.split(','))\n  const max = Math.max(...table.filter(e => e.includes('King')).map(e => Number.parseInt(e[4])));\n\n  return {\n    data: table,\n    lastUpdated,\n    max\n  };\n};\n\nexport default Index;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAHA;AASA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAEA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AACA;AAFA;AAAA;AACA;AADA;AAIA;AAJA;AAMA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAPA;AAUA;AACA;AACA;AAHA;AACA;AAVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAeA;;;;A","sourceRoot":""}