{"version":3,"file":"static/webpack/static/development/pages/index.js.af3a42dce842f2bf300d.hot-update.js","sources":["webpack:///./pages/index.tsx"],"sourcesContent":["import fetch from 'isomorphic-unfetch';\nimport { Charts, ChartContainer, ChartRow, YAxis, Resizable, BarChart } from \"react-timeseries-charts\";\nimport { TimeSeries, TimeRange, Index as PondIndex } from \"pondjs\";\n\nconst Index = (props: { timeseries: TimeSeries, timerange: TimeRange }) => {\n  return <div>\n    <Resizable>\n      <ChartContainer timeRange={props.timerange} >\n        <ChartRow height=\"150\">\n          <YAxis\n            id=\"rain\"\n            label=\"Rainfall (inches/hr)\"\n            min={0}\n            max={1.5}\n            format=\".2f\"\n            width=\"70\"\n            type=\"linear\"\n          />\n          <Charts>\n            <BarChart\n              axis=\"rain\"\n              spacing={1}\n              columns={[\"precip\"]}\n              series={props.timeseries}\n            />\n          </Charts>\n        </ChartRow>\n      </ChartContainer>\n    </Resizable>\n    {/* <p>{JSON.stringify(props.timeseries)}</p> */}\n    <div>test</div>\n  </div>\n}\n\nIndex.getInitialProps = async function () {\n  const res = await fetch('https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv');\n  // const data = await res.json();\n\n  const text = await res.text();\n  const [headings, ...data] = text.split('\\n');\n  const table = data.filter(e => e.includes('San Francisco')).map(e => e.split(','))\n\n\n  const seriesData = {\n    name: \"traffic\",\n    columns: [\"time\", \"in\", \"out\"],\n    points: [\n      [1400425947000, 52, 41],\n      [1400425948000, 18, 45],\n      [1400425949000, 26, 49],\n      [1400425950000, 93, 81],\n    ]\n  };\n\n\n\n  const data2 = [\n    [\"2017-01-24T00:00\", 0.01],\n    [\"2017-01-24T01:00\", 0.13],\n    [\"2017-01-24T02:00\", 0.07],\n    [\"2017-01-24T03:00\", 0.04],\n    [\"2017-01-24T04:00\", 0.33],\n    [\"2017-01-24T05:00\", 0.2],\n    [\"2017-01-24T06:00\", 0.08],\n    [\"2017-01-24T07:00\", 0.54],\n    [\"2017-01-24T08:00\", 0.95],\n    [\"2017-01-24T09:00\", 1.12],\n    [\"2017-01-24T10:00\", 0.66],\n    [\"2017-01-24T11:00\", 0.06],\n    [\"2017-01-24T12:00\", 0.3],\n    [\"2017-01-24T13:00\", 0.05],\n    [\"2017-01-24T14:00\", 0.5],\n    [\"2017-01-24T15:00\", 0.24],\n    [\"2017-01-24T16:00\", 0.02],\n    [\"2017-01-24T17:00\", 0.98],\n    [\"2017-01-24T18:00\", 0.46],\n    [\"2017-01-24T19:00\", 0.8],\n    [\"2017-01-24T20:00\", 0.39],\n    [\"2017-01-24T21:00\", 0.4],\n    [\"2017-01-24T22:00\", 0.39],\n    [\"2017-01-24T23:00\", 0.28]\n];\n\nconst series2 = new TimeSeries({\n  name: \"hilo_rainfall\",\n  columns: [\"index\", \"precip\"],\n  points: data2.map(([d, value]) => [\n      (PondIndex.getIndexString as any)(\"1h\", new Date(d)),\n      value\n  ])\n});\n\nconsole.log('series2', series2);\n\n  // const timeseries = new TimeSeries(seriesData);\n\n  return {\n    timeseries: series2,\n    timerange: series2.timerange(),\n  };\n};\n\nexport default Index;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AACA;AADA;AAIA;AAJA;AAMA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAHA;AAaA;AA2BA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAHA;AASA;AACA;AA3DA;AA+DA;AACA;AAFA;AACA;AA/DA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAmEA;;;;A","sourceRoot":""}